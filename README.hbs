# [RANDPR](https://github.com/totem-man/randpr)

Generate or learn various random processes.

In its generation mode, **RANDPR** will generate a first-order, K-state Markov process given 
its first-order, KxK transition probabilites.  **RANDPR** also computes equilibrium probabilities (if they 
exist), mean recurrence times, time to first absorption, absorption probabilites and the statistical 
auto-covariance function.  **RANDPR** can create ergodic, regular, absorptive processes, Weiner 
(stationary in first increments), and wide-sense stationary processes.

In its learning mode, **RANDPR** produces supervised and unsupervised estimates:
MLEs of the underlying transition probabilities, number of coherence intervals (and related SNR),
and the underlying intensity profile.  (MLE for the Weiner process, e.g. first time to exit, have not 
yet been implemented).

Both discrete- and continious-time models are supported in either forward or reverse mode.  

**RANDPR** can be customized with onStep(), onBatch(), onEnd(), and filter() methods to 
sample metrics in both forward and reverse modes.  Both modes can make use of piped 
streams to minimize memory usage.

**RANDPR** supports the following processes.


## Bayes

	K-state process governed by a prescribed conditional independency network:
	
		eqP: [pr, ...] the K equilibrium probs 
		net: [ {var: probs, ...}, ... ] the conditional dependencies 
		
	or expressed as a DAG:
	
		dag: { ... }
	
## Gillespie

	Inhomogenious K-state process with specified transition probabilties:
	
		states: number of states
		
	where its K^2 transition probs are synthesized using the gillespie model.
	
## Markov

	K-state process with specified transition probabilities:
	
		TxPrs: [ [...], ....] the K^2 (K^2-K independent) transition probs 
		
	or:
	
		states: K
		TxPrs: { from: {to: pr, ... } , ... "from, ..." : "to, ..." }	
		
	where from-to transition probs must be specified to conserve prob, i.e. sum_k TxPrs[n][k] = 1.

## Gauss

	Correlated, stateless random process whose parameters are typically derived (see man) 
	for a process with known correlation intervals M = T/Tc or SNR = sqrt{ M / ( 1 + deltaC / M) }.

		values: [ ... ] pc eigen values  [unitless]
		vectors: [ [... ], ...] pc eigen values	[sqrt Hz]
		ref: reference eigenvalue 
		dim: max pc dimension (M = T/Tc )
		mean: mean count in observation interval T

## Wiener

	Stateless process with moving 2nd moment (but stationary in 1st increments) where:
	
		walks: number of walks at each time step (0 disables)
		
	This still needs a quick debug.  May need to define	false Markov parms to init it.
	
## Ornstein

	Stateless Ornstein-Ulenbeck process with:
	
		theta: 0-pi
		a: sigma/sqrt(2 theta)
		
## Mixing

	Gauss mixing process with specified mu,sigma (mean, covar), or specified snr, cone, mixes, oncov, offcov

## Refs

* www.statslab.cam.ac.uk/~rrw1
* www.stat.yale.edu/~pollard
* people.math.gatech.edu/~randall
* www.stat.berkeley.edu/~pitman
* www.math.dartmouth.edu/~pw

## Installation

Clone **RANDPR** from one of its REPOs:

	cd MYPROJECT
	git clone REPO/totem-man/randpr
	git clone REPO/totem-man/man

### Manage 

	npm test [ ? || R1 || R2 || ... ]	# unit test
	npm run [ edit || start ]			# Configure environment
	npm run [ prmprep || prmload ]		# Revise PRM

## Usage

Require the module:

	var RAN = require("randpr");
	
then create a new instance:

	var ran = new RAN({
		key: value, 						// set key
		"key.key": value, 					// indexed set
		"key.key.": value					// indexed append
	}, function (err) {
		console.log( err ? "something evil is lurking" : "look mom - Im running!");
	});

where configuration keys follow [ENUMS deep copy conventions](https://github.com/totem-man/enums)

The instance can then be piped:

	ran.pipe()
	
to genenerate a process (if configured in the forward/generate mode), or learn process parameters (if 
configured in the reverse/learning mode).


## Program Reference
<details>
<summary>
<i>Open/Close</i>
</summary>
{{>main}}
</details>

## Contacting, Contributing, Following

Feel free to 
* submit and status [TOTEM issues](http://totem.hopto.org/issues.view) 
* contribute to [TOTEM notebooks](http://totem.hopto.org/shares/notebooks/) 
* revise [TOTEM requirements](http://totem.hopto.org/reqts.view) 
* browse [TOTEM holdings](http://totem.hopto.org/) 
* or follow [TOTEM milestones](http://totem.hopto.org/milestones.view) 


## License

[MIT](LICENSE)

* * *

&copy; 2012 ACMESDS